name: CI/CD with Security Scanning

on:
  push:
    branches: [ main, enhance, develop ]
  pull_request:
    branches: [ main, enhance ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: ${{ github.repository }}

jobs:
  # Security scanning and building
  security-scan-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - api-gateway
          - ai-overseer
          - reviewer
          - light-reviewer
          - heavy-reviewer
          - writer
          - editor
          - presenter
          - publishing
          - news-feed
          - collections
          - podcast-host
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        file: ./services/${{ matrix.service }}/Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/${{ matrix.service }}-image.tar
        
    - name: Load image for scanning
      run: docker load --input /tmp/${{ matrix.service }}-image.tar
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'  # Fail on critical/high vulnerabilities
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
        
    - name: Install Cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@v3
      
    - name: Push and sign image
      if: github.event_name != 'pull_request'
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        # Push the image
        docker load --input /tmp/${{ matrix.service }}-image.tar
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
        
        # Sign the image with cosign
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
        
    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
        format: 'spdx-json'
        output: 'sbom-${{ matrix.service }}.spdx.json'
        
    - name: Upload SBOM as artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.service }}
        path: sbom-${{ matrix.service }}.spdx.json

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: security-scan-and-build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest httpx pytest-asyncio
        
    - name: Start services with Docker Compose
      run: |
        # Copy environment template
        cp .env.example .env || echo "No .env.example found"
        
        # Start core services for testing
        docker compose up -d postgres redis ollama
        
        # Wait for services to be ready
        sleep 30
        
    - name: Run integration tests
      run: |
        # Run basic health checks
        python -m pytest Tests/Current/ -v --tb=short
        
    - name: Cleanup
      if: always()
      run: docker compose down -v

  # Deploy (optional - for main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [security-scan-and-build, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add deployment steps here (e.g., trigger deployment webhook)
        # This is a placeholder for actual deployment logic
        
    - name: Notify deployment
      run: |
        echo "âœ… Deployment completed successfully"
        # Add notification logic (Slack, email, etc.)